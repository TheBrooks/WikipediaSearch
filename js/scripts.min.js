/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var events = {
  events: {},
  subscribe: function (eventName, fn) {
    this.events[eventName] = this.events[eventName] || [];
    this.events[eventName].push(fn);
  },
  unsubscribe: function(eventName, fn) {
    if (this.events[eventName]) {
      for (var i = 0; i < this.events[eventName].length; i++) {
        if (this.events[eventName][i] === fn) {
          this.events[eventName].splice(i, 1);
          break;
        }
      };
    }
  },
  emit: function (eventName, data) {
    if (this.events[eventName]) {
      this.events[eventName].forEach(function(fn) {
        fn(data);
      });
    }
  }
};

module.exports = events;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

(function($, window, document) {
	var events = __webpack_require__(0);

	var wikiPageJsonFormatter = (function(){
		function pagesFromWikiJson(json) {
			var pages = json.query.pages;
			var formattedPages = [];
			for(var prop in pages) {
				var newPage = {
					title: pages[prop].title,
					description: pages[prop].extract,
					url: "http://en.wikipedia.org/?curid=" + pages[prop].pageid,
				};
				formattedPages.push(newPage);
			}
			return formattedPages;
		}

		return {
			pagesFromWikiJson: pagesFromWikiJson,
		};
	})();

	var wikiSearcher = (function(wikiJsonFormatter){
		var offset = 0;
		var limit = 10;
		var search = "";
		var apiBase = "https://en.wikipedia.org/w/api.php?format=json&action=query&generator=search&gsrnamespace=0&prop=extracts&exintro&explaintext&exsentences=1&exlimit=max"
		var limitParam = "&gsrlimit=";
		var offsetParam = "&gsroffset=";
		var searchParam = "&gsrsearch=";

		//Cache DOM
		var $search = $("#search-text");

		//bind events
		$search.on('search', searchFired);
		events.subscribe('bottomOfPage', bottomOfPage);

		function searchFired() {
			offset = 0;
			search = $search.val();
			clearSearch();
			getNextWikipediaQuery();
		}

		function clearSearch() {
			events.emit("clearSearch", []);
		}

		function getNextWikipediaQuery() {
			if (!search) {
				return;
			}

			var queryStr = apiBase + limitParam + limit + offsetParam + offset + searchParam + search;
			var query = $.getJSON(queryStr);
			events.emit('queriedPages', null);
			// TODO handle error
			query.done(handleWikipediaData);
		}

		function handleWikipediaData(data) {
			var pages = wikiJsonFormatter.pagesFromWikiJson(data);
			offset += pages.length;
			events.emit("updateQueryResults", pages);
		}

		function bottomOfPage(){
			getNextWikipediaQuery();
		}
	})(wikiPageJsonFormatter);


	var pageViewer = (function(){
		var pages = [];

		//cache DOM
		var $ul = $("#result-list");
		var template = $ul.find("#page-template").html();

		//bind events
		events.subscribe('updateQueryResults', addPages);
		events.subscribe('clearSearch', clearPages);
		_render();

		function _render() {
			$ul.html(Mustache.render(template, {pages: pages}));
		}

		function addPages(value) {
			pages = pages.concat(value);
			events.emit('addedPages', null);
			_render();
		}

		function clearPages() {
			pages = [];
			_render();
		}

		return {
			addPages: addPages,
			clearPages: clearPages,
		};
	})();
}(window.jQuery, window, document));

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

(function($, window, document) {	
	var events = __webpack_require__(0);

	var scroll = (function(){
		var win = $(window);

		//cache DOM
		var $loading = $('#loading');

		//Bind events
		win.scroll(checkBottomOfPage);
		events.subscribe('addedPages', hideLoading);
		events.subscribe('queriedPages', showLoading);

		function checkBottomOfPage() {
			if ($(document).height() - win.height() == win.scrollTop()) {
				events.emit("bottomOfPage", null);
			}
		}

		function showLoading() {
			$loading.show();
		}

		function hideLoading() {
			$loading.hide();
		}
	})();
}(window.jQuery, window, document));

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
__webpack_require__(1);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,